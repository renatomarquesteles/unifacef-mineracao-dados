# 11
round(rnorm(10, 1, 10))
# 11
round(runif(10, 1, 10))
# 11
round(runif(100, 1, 100))
# 11
p = round(runif(100, 1, 100))
p
help(factor)
help(tapply)
racas = c("bulldog", "rafeiro", "doberman", "rafeiro", "bulldog",
"rafeiro", "rafeiro", "doberman")
fr = factor(racas)
fr
levels(fr)
table(fr)
fr
table(fr)
help(factor)
factor(letters[1:20], labels = "letter")
letters[1:20]
factor(letters[1:20])
A = matrix(1 : 4, 2, 2)
A
B = matrix(4 : 1, 2, 2)
B
C = A %*% B
C
A * 3
t(C)
det(C)
A = matrix(1 : 4, 2, 2)
b = c(1, 3)
solve(A, b)
a = array(1 : 24, c(4, 3, 2))
a
a[3, 2, 2]
a[3, 2, ]
a[ , , 1]
sum(a)
mean(a[1, , ])
cos(pi * a[1, , ])
auto = list(marca = "ford", modelo = "focus", nportas = 5,
velocMax = 210, consumos = c(6, 7.1, 9.3))
auto
auto[2 : 3]
is.list(auto)
auto[[1]]
auto$marca
auto$consumos[1]
racas = c("bulldog", "rafeiro", "doberman",
"rafeiro", "bulldog", "rafeiro",
"rafeiro", "doberman")
pesos = c(12, 15, 35, 10, 20, 8, 13, 25)
tamanhos = c("medio", "medio", "grande",
"pequeno", "grande", "pequeno",
"pequeno", "medio", "grande")
df = data.frame(racas, tamanhos, pesos)
tamanhos = c("medio", "medio", "grande",
"pequeno", "grande", "pequeno",
"medio", "grande")
df = data.frame(racas, tamanhos, pesos)
df
df$tamanhos
df$pesos[1: 4]
df[2, 2]
df[1 : 3, ]
df[ , 2]
df[2, 2]
df[1 : 3, ]
df[ , 2]
df[df$racas == "bulldog", ]
df[df$racas == "bulldog" & df$tamanhos == "medio", ]
## VETOR LOGICO A PARTIR DE CONDICAO
vetor = df$pesos > 12
vetor
## UTILIZAR VETOR PARA REALIZAR FILTRO
df[vetor, ]
df1 = edit(df)
df2 = edit(data.frame())
## TAMANHO DO DF
data(iris)
dim(iris)
## TAMANHO DO DF
## IRIS = CONJUNTO DE DADOS INTERNOS
iris
dim(iris)
names(iris)
head(iris)
iris[iris$Sepal.Length > 7.6, ]
table(iris$Species)
tapply(iris$Petal.Length, iris$Species, mean)
subset(iris, subset = iris$Petal.Length > 6.5)
subset(iris, subset = iris$Petal.Width < 0.2,
+ select = c(Species, Petal.Width))
subset(iris, subset = iris$Petal.Width < 0.2,
select = c(Species, Petal.Width))
attach(iris)
Species[1 : 3]
detach(iris)
Species
with(iris, mean(Petal.Length))
comment(df) = "Descrição do conjunto de dados"
df
comment(df)
## TODOS TEM Q TER MESMO TAMANHO
racas = c("bulldog", "rafeiro", "doberman",
"rafeiro", "bulldog", "rafeiro",
"rafeiro", "doberman")
pesos = c(12, 15, 35, 10, 20, 8, 13, 25)
tamanhos = c("medio", "medio", "grande",
"pequeno", "grande", "pequeno",
"medio", "grande")
df = data.frame(racas, tamanhos, pesos)
df
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
filter(df, tamanhos == "medio", pesos < 15)
slice(df, 1 : 2)
arrange(df, desc(pesos))
## SELECIONAR COLUNAS ESPECIFICAS
select(df, racas, pesos)
##
rename(df, Pesos = pesos)
## CRIA NOVA COLUNA COM ALGUM DADO
mutate(df, pesogr = pesos * 1000)
## CONVERTE STRING EM DATA
dia = as.Data("2019-09-05")
## CONVERTE STRING EM DATA
dia = as.Date("2020-08-25")
dia
dia =as.Date('25/08/2020', format = '%d/%m/%Y')
dia
dia =as.Date("25/08/2020", format = "%d/%m/%Y")
dia
dia =as.Date("26/08/2020", format = "%d/%m/%Y")
dia
hoje = Sys.time()
dataHoje = as.Date(hoje)
dataHoje
weekdays(dataHoje)
months(dia)
## CALCULOS COM DATAS
dataHoje - dia
## FORMATA DATA
dia =as.Date("01/08/2020", format = "%d/%m/%Y")
dia
## CALCULOS COM DATAS
dataHoje - dia
dataHoje + 2
dataHoje
365 - dataHoje
#1
mat = matrix(1 : 6, 2, 3)
mat
## b
mat[2, 3]
## b
mat[2, ]
mat[ , 3]
## b
mat[2,]
mat[, 3]
## c
dim(mat)
## d
sum(mat)
## e
sum(mat[1,])
## f
apply(mat, 2, mean)
mat
# 2
## a
c(1 : 100)
a = array(1 : 24, c(4, 3, 2)) # c(LINHA, COLUNA, DIMENSAO)
a
# 2
## a
vet2 = c(1 : 100)
## b
matrix(vet2, 10, 10,)
## b
matrix(vet2, 10, 10)
# 3
## a
array(1 : 30, c(2, 5, 3))
## b
vet3[,3,]
# 3
## a
vet3 = array(1 : 30, c(2, 5, 3))
## b
vet3[,3,]
## b
sum(vet3[,3,])
vet3[,,3]
## c
vet3[1,1,]
## c
mean(vet3[1, 1,])
## d
vet3 * 2 + 3
# 4
## a
A = matrix(2, 2, 3)
A
B = matrix(1 : 6, 2, 3)
B
## b
A + B
## c
dim(B) = c(3, 2)
B
## d
A * B
## d
A %*% B
# 5
## a
l = list(nome = "João", idade = 30)
l
## b
l$nome
l$idade
l[[1]]
l[[2]]
## b
l
# 6
## a
pressure
data(pressure)
# 6
## a
pressure
## b
mean(pressure$pressure)
## c
subset(pressure, subset = pressure$temperature == 320, select = c(pressure))
## c
subset(pressure, subset = (pressure$temperature == 320), select = c(pressure))
# 6
## a
pressure
typeof(pressure)
## c
subset(pressure, subset = (pressure$temperature == 320), select = c(pressure))
typeof(iris)
## c
subset(pressure, subset = (pressure$temperature > 320), select = c(pressure))
subset(iris, subset = iris$Petal.Width < 0.2,
select = c(Species, Petal.Width))
# 6
## a
pressure
iris
## c
subset(pressure, subset = pressure$temperature < 320, select = c(pressure))
## c
subset(pressure, subset = pressure$temperature == 320, select = c(pressure))
## c
subset(pressure, subset = pressure[["temperature"]] == 320, select = c(pressure))
## c
subset(pressure, subset = pressure["temperature"] == 320, select = c(pressure))
pressure["temperature"]
pressure[["temperature"]]
## c
subset(pressure, subset = pressure[["temperature"]] == 320, select = c(pressure))
$temperature
## c
subset(pressure, subset = pressure$temperature == 320, select = c(pressure))
pressure$temperature == 320
pressure$temperature < 320
subset(pressure, subset = pressure$temperature == 320, select = c(pressure))
## c
subset(pressure, subset = pressure$temperature == 320, select = c(pressure, temperature))
## c
subset(pressure, subset = pressure$temperature == 320)
## c
subset(data(pressure), subset = pressure$temperature == 320)
# 6
## a
a = pressure
## c
subset(a, subset = a$temperature == 320, select = c(pressure))
# 6
## a
x = pressure
## b
mean(x$pressure)
## c
subset(x, subset = x$temperature == 320, select = c(pressure))
## d
x
## d
max(subset(x, subset = x$temperature < 100, c(pressure)))
x
## e
df = data.frame(subset(x, subset = x$pressure < 100))
df
# 6
## a
data(pressure)
# 7
## a
data(sleep)
sleep
class(sleep)
mapply(class, sleep)
## b
tapply(sleep$extra, sleep$group, mean)
sleep
## b
tapply(sleep$extra, sleep$group, mean)
library(MASS)
MASS
MASS.UScereal
UScereal
# 1
library(MASS)
help(library)
UScereal
## b
dim(UScereal)
## c
head(UScereal)
## c
slice(UScereal, 1 : 10)
UScereal[1 : 10]
## c
UScereal[1 : 10, ]
## c
UScereal[1 : 10, ]
## d
UScereal[1 : 10, c(1, 3, 5)]
## e
media = mean(UScereal$calories)
media
UScereal[UScereal$calories > media]
UScereal[UScereal$calories > media, ]
## ALTERAR DIRETORIO ATUAL
setwd("/home/renato/Documentos/unifacef/mineracao/temp/datascience")
## OBTER DIRETORIO ATUAL
getwd()
write.table(resultado, sep = ";")
resultado = UScereal[UScereal$calories > media, ]
write.table(resultado, sep = ";")
write.table(resultado, file = "muitascalorias.txt", sep = ";")
# 2
## a
runif(5, 8, 80)
rnorm(60, 20)
rnorm(5, 60, 20)
letrasgenero = c("M", "F")
genero = sample(letrasgenero, 5, replace = T)
genero
campos = c('idade', 'peso', 'altura', 'gênero')
dados = c(runif(5, 8, 80), rnorm(5, 60, 20), rnorm(5, 160, 40), genero)
data.frame(campos, dados)
# 2
## a
idade = runif(5, 8, 80)
peso = rnorm(5, 60, 20)
altura = rnorm(5, 160, 40)
letrasgenero = c("M", "F")
genero = sample(letrasgenero, 5, replace = T)
data.frame(idade, peso, altura, genero)
# 2
## a
idade = runif(5, 8, 80)
peso = rnorm(5, 60, 20)
altura = rnorm(5, 160, 40)
letrasgenero = c("M", "F")
genero = sample(letrasgenero, 5, replace = T)
data.frame(idade, peso, altura, genero)
dados = data.frame(idade, peso, altura, genero)
dados
# 2
## a
idade = runif(5, 8, 80)
peso = rnorm(5, 60, 20)
altura = rnorm(5, 160, 40)
letrasgenero = c("M", "F")
genero = sample(letrasgenero, 5, replace = T)
dados = data.frame(idade, peso, altura, genero)
dados
# 2
## a
idade = runif(5, 8, 80)
peso = rnorm(5, 60, 20)
altura = rnorm(5, 160, 40)
letrasgenero = c("M", "H")
genero = sample(letrasgenero, 5, replace = T)
dados = data.frame(idade, peso, altura, genero)
dados
# 2
## a
idade = runif(5, 8, 80)
peso = rnorm(5, 60, 20)
altura = rnorm(5, 160, 40)
letrasgenero = c("M", "H")
genero = sample(letrasgenero, 5, replace = T)
dados = data.frame(idade, peso, altura, genero)
dados
# 2
## a
idade = runif(5, 8, 80)
peso = rnorm(5, 60, 20)
altura = rnorm(5, 160, 40)
letrasgenero = c("M", "H")
genero = sample(letrasgenero, 5, replace = T)
dados = data.frame(idade, peso, altura, genero)
dados
# 2
## a
idade = runif(5, 8, 80)
peso = rnorm(5, 60, 20)
altura = rnorm(5, 160, 40)
letrasgenero = c("M", "H")
genero = sample(letrasgenero, 5, replace = T)
dados = data.frame(idade, peso, altura, genero)
dados
# 2
## a
idade = runif(5, 8, 80)
dados = data.frame(idade, peso, altura, genero)
dados
peso = rnorm(5, 60, 20)
dados = data.frame(idade, peso, altura, genero)
dados
peso = rnorm(5, 60, 20)
dados = data.frame(idade, peso, altura, genero)
dados
altura = rnorm(5, 160, 40)
dados = data.frame(idade, peso, altura, genero)
dados
altura = rnorm(5, 160, 40)
dados = data.frame(idade, peso, altura, genero)
dados
altura = rnorm(5, 160, 40)
dados = data.frame(idade, peso, altura, genero)
dados
altura = rnorm(5, 160, 40)
dados = data.frame(idade, peso, altura, genero)
dados
altura = rnorm(5, 160, 40)
dados = data.frame(idade, peso, altura, genero)
dados
altura = rnorm(5, 160, 40)
dados = data.frame(idade, peso, altura, genero)
dados
altura = rnorm(5, 160, 40)
dados = data.frame(idade, peso, altura, genero)
dados
## b
dados[order(idade)]
## b
dados[order(idade), ]
## b
dados = dados[order(idade), ]
dados
## c
cbind(dados, nomes)
## c
nomes = c('Ana', 'Maria', 'Letícia', 'João', 'José')
cbind(dados, nomes)
dados = subset(mydata, select = -c(nomes))
subset(dados, select = -c(nomes))
subset(dados, select = -c('nomes'))
dados = data.frame(idade, peso, altura, genero)
dados
dados
## b
dados = dados[order(idade), ]
dados
## c
nome = c('Ana', 'Maria', 'Letícia', 'João', 'José')
cbind(dados, nome)
## d
colnames(dados)
## d
colnames(dados) =
mapply(toupper, colnames(dados))
mapply(toupper, colnames(dados))
dados
## c
nome = c('Ana', 'Maria', 'Letícia', 'João', 'José')
cbind(dados, nome)
## d
colnames(dados) = mapply(toupper, colnames(dados))
dados
write.table(dados, sep = "\t")
write.table(dados, sep = "/t")
## e
write.table(dados, file = "individuos.txt", sep = "\t")
dados
cbind(dados, nome)
dados = cbind(dados, nome)
dados
## d
colnames(dados) = mapply(toupper, colnames(dados))
dados
## e
write.table(dados, file = "individuos.txt", sep = "\t")
UScereal$calories > mean(UScereal$calories
UScereal$calories > mean(UScereal$calories)
m <- UScereal$calories > mean(UScereal$calories)
m
