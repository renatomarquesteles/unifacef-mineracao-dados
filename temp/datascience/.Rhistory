vb1[3]
v = 1:10
vb2 = v > 5
vb2
vb2 | vb1
vb2 | vb1
vb1
vb2
all(vb1)
any(vb1)
which(vb1)
ve = 8:2
ve
vb = ve > 5
vb
ve[vb] # ONDE FOR TRUE EXIBE O ELEMENTO
ve[ve < 6]
cores = c("azul", "amarelo", "verde", "vermelho")
cores[3]
muitascores = rep(cores, 2)
muitascores
muitascores[1] == muitascores[5]
nome = "Renato"
apelido = "Marques"
toupper(nome)
paste(nome, apelido)
substr(apelido, 2, 4)
nchar(nome)
sub("to", "ta", nome) # SO TROCA A PRIMEIRA OCORRENCIA
str = "abracadabra"
gsub("a", "x", str) # TROCA TODAS OCORRENCIAS
chartr("abc", "ABC", str)
x = "Isto é um teste"
strsplit(x, " ")
nomes = c("joão", "joaquim", "jose")
apelidos = c("pereira", "martins")
paste(nomes, apelidos, sep = " ")
toupper(nomes)
nomes
mapply(nchar, nome) # VAI CONTAR OS CARACTERES DE CADA NOME
mapply(nchar, nomes) # VAI CONTAR OS CARACTERES DE CADA NOME
sub("j", "J", nomes)
grep("abra", c("cabra", "braga", "abracadabra"))
letters
LETTERS
racas = c("bulldog", "rafeiro", "doberman", "rafeiro", "bulldog",
"rafeiro", "rafeiro", "doberman")
fr = factor(racas)
fr
levels(fr)
table(fr)
pesos = c(12, 15, 25, 10, 20, 8, 13, 25)
tapply(pesos, fr, mean)
tamanhos = c("medio", "medio", "grande", "pequeno", "grande",
"pequeno", "medio", "grande")
of = ordered(tamanhos, c("pequeno", "medio", "grande"))
of
of = ordered(tamanhos, c("medio", "pequeno", "grande"))
of
of = ordered(tamanhos, c("pequeno", "medio", "grande"))
of
tapply(pesos, of, range)
v = c(NA, 2, 3, NA, 5)
v
v[is.na(v)
v[is.na(v)]
v[is.na(v)]
v[!is.na(v)]
v[!is.na(v)]
# 1
x = 1
y = 2
x + y
x - y
x * y
x / y
x %/% y
x %% y
# 2
sin(pi / 6)
cos(pi / 6)
tan(pi / 6)
seq(1, 40, 2)
# 3
## a
z = seq(1, 40, 2)
z
sum(z)
v = 1:10
vb2 = v > 5
vb2
x %% y
x %/% y
## c
which(z %/% 3 == 0)
## c
which(z %/% 3)
## c
which(z %/% 3 == 0)
z %/% 3
z
5 %/% 2
5 %% 2
5 %% 3
5 %% 5
## c
which(z %% 3 == 0)
## c
w = which(z %% 3 == 0)
z[w]
## d
w / 3
## d
z[w] / 3
# 4
sum(seq(2, 1000, 2))
seq(2, 1000, 2)
# 5
v = sqrt(1 : 20)
v
# 6
## a
p = 1 : 20
p
## b
sum(rev(p))
## b
rev(p)
## b
p + rev(p)
## c
v = p + 3
v
## d
v = 1 / p
v
## c
p + 3
## d
1 / p
# 7
## a
a = "azul"
a
# 7
## a
az = "azul"
az
am = "amarelo"
ak
am
## c
paste(az, am)
grep("abra", c("cabra", "braga", "abracadabra"))
# 8
nome = "renato"
sub("r", "R", nome)
racas = c("bulldog", "rafeiro", "doberman", "rafeiro", "bulldog",
"rafeiro", "rafeiro", "doberman")
fr = factor(racas)
levels(fr)
pesos = c(12, 15, 25, 10, 20, 8, 13, 25)
tapply(pesos, fr, mean) # (VETOR A ANALISAR, FATORES, FUNCAO)
# 9
numeros = c(1, 2, 3)
nomes = c("Ana", "João", "Maria")
notas = c(9, 4, 7)
paste(numeros, nomes, notas, sep = " - ")
# 10
gastos = c(60, 55, 38, 87, 65, 63, 43, 44, 45, 50, 78, 67)
## a
sum(gastos)
## b
min(gastos)
max(gastos)
which.max(gastos)
which.min(gastos)
## c
mean(gastos)
help(which)
## c
which(gastos > mean(gastos))
## c
nchar(which(gastos > mean(gastos)))
nchar(nome)
## c
length(which(gastos > mean(gastos)))
gastos > mean(gastos)
gastos[gastos > mean(gastos)]
gastos[gastos > mean(gastos)] / sum(gastos)
gastos[gastos > mean(gastos)] / sum(gastos) * 100
format(gastos[gastos > mean(gastos)] / sum(gastos) * 100, nsmall = 2)
format(gastos[gastos > mean(gastos)] / sum(gastos) * 100, nsmall = 0.2)
gastos[gastos > mean(gastos)] / sum(gastos) * 100
gastos[gastos > mean(gastos)] / sum(gastos)
paste(which(gastos > mean(gastos), gastos[gastos > mean(gastos)] / sum(gastos), separator = ": "))
paste(which(gastos > mean(gastos), gastos[gastos > mean(gastos)] / sum(gastos), sep = ": "))
paste((which(gastos > mean(gastos), gastos[gastos > mean(gastos)] / sum(gastos)), sep = ": "))
gastos[gastos > mean(gastos)] / sum(gastos)
## c
which(gastos > mean(gastos))
## c
x = which(gastos > mean(gastos))
y = gastos[gastos > mean(gastos)] / sum(gastos)
x
y
paste(x, y, sep = " - ")
paste(x, y, sep = ": ")
x
x
## c
mesesacima = gastos > mean(gastos)
mesesacima
## c
length(which(gastos > mean(gastos)))
x = which(gastos > mean(gastos))
y = gastos[gastos > mean(gastos)] / sum(gastos)
paste(x, y, sep = ": ")
## runif = GERA VALORES ALEATORIOS (DISTRIBUICAO UNIFORME)
x = runif(10)
x
y = runif(10, 5, 10) # QTD 10, INTERVALO 5 A 10
y
## rnorm = GERA VALORES ALEATORIOS (DISTRIBUICAO NORMAL)
## rpois = GERA VALORES ALEATORIOS (DISTRIBUICAO POISSON)
rnorm(10)
## rnorm = GERA VALORES ALEATORIOS (DISTRIBUICAO NORMAL)
## rpois = GERA VALORES ALEATORIOS (DISTRIBUICAO POISSON)
rnorm(10, 1, 10)
rpois(10, 1, 10)
rpois(10)
## runif = GERA VALORES ALEATORIOS (DISTRIBUICAO UNIFORME)
x = runif(10)
x
# 11
round(runif(10))
# 11
round(runif(10, 1, 10))
# 11
round(rnorm(10, 1, 10))
# 11
round(runif(10, 1, 10))
# 11
round(runif(100, 1, 100))
# 11
p = round(runif(100, 1, 100))
p
help(factor)
help(tapply)
racas = c("bulldog", "rafeiro", "doberman", "rafeiro", "bulldog",
"rafeiro", "rafeiro", "doberman")
fr = factor(racas)
fr
levels(fr)
table(fr)
fr
table(fr)
help(factor)
factor(letters[1:20], labels = "letter")
letters[1:20]
factor(letters[1:20])
A = matrix(1 : 4, 2, 2)
A
B = matrix(4 : 1, 2, 2)
B
C = A %*% B
C
A * 3
t(C)
det(C)
A = matrix(1 : 4, 2, 2)
b = c(1, 3)
solve(A, b)
a = array(1 : 24, c(4, 3, 2))
a
a[3, 2, 2]
a[3, 2, ]
a[ , , 1]
sum(a)
mean(a[1, , ])
cos(pi * a[1, , ])
auto = list(marca = "ford", modelo = "focus", nportas = 5,
velocMax = 210, consumos = c(6, 7.1, 9.3))
auto
auto[2 : 3]
is.list(auto)
auto[[1]]
auto$marca
auto$consumos[1]
racas = c("bulldog", "rafeiro", "doberman",
"rafeiro", "bulldog", "rafeiro",
"rafeiro", "doberman")
pesos = c(12, 15, 35, 10, 20, 8, 13, 25)
tamanhos = c("medio", "medio", "grande",
"pequeno", "grande", "pequeno",
"pequeno", "medio", "grande")
df = data.frame(racas, tamanhos, pesos)
tamanhos = c("medio", "medio", "grande",
"pequeno", "grande", "pequeno",
"medio", "grande")
df = data.frame(racas, tamanhos, pesos)
df
df$tamanhos
df$pesos[1: 4]
df[2, 2]
df[1 : 3, ]
df[ , 2]
df[2, 2]
df[1 : 3, ]
df[ , 2]
df[df$racas == "bulldog", ]
df[df$racas == "bulldog" & df$tamanhos == "medio", ]
## VETOR LOGICO A PARTIR DE CONDICAO
vetor = df$pesos > 12
vetor
## UTILIZAR VETOR PARA REALIZAR FILTRO
df[vetor, ]
df1 = edit(df)
df2 = edit(data.frame())
## TAMANHO DO DF
data(iris)
dim(iris)
## TAMANHO DO DF
## IRIS = CONJUNTO DE DADOS INTERNOS
iris
dim(iris)
names(iris)
head(iris)
iris[iris$Sepal.Length > 7.6, ]
table(iris$Species)
tapply(iris$Petal.Length, iris$Species, mean)
subset(iris, subset = iris$Petal.Length > 6.5)
subset(iris, subset = iris$Petal.Width < 0.2,
+ select = c(Species, Petal.Width))
subset(iris, subset = iris$Petal.Width < 0.2,
select = c(Species, Petal.Width))
attach(iris)
Species[1 : 3]
detach(iris)
Species
with(iris, mean(Petal.Length))
comment(df) = "Descrição do conjunto de dados"
df
comment(df)
## TODOS TEM Q TER MESMO TAMANHO
racas = c("bulldog", "rafeiro", "doberman",
"rafeiro", "bulldog", "rafeiro",
"rafeiro", "doberman")
pesos = c(12, 15, 35, 10, 20, 8, 13, 25)
tamanhos = c("medio", "medio", "grande",
"pequeno", "grande", "pequeno",
"medio", "grande")
df = data.frame(racas, tamanhos, pesos)
df
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
filter(df, tamanhos == "medio", pesos < 15)
slice(df, 1 : 2)
arrange(df, desc(pesos))
## SELECIONAR COLUNAS ESPECIFICAS
select(df, racas, pesos)
##
rename(df, Pesos = pesos)
## CRIA NOVA COLUNA COM ALGUM DADO
mutate(df, pesogr = pesos * 1000)
## CONVERTE STRING EM DATA
dia = as.Data("2019-09-05")
## CONVERTE STRING EM DATA
dia = as.Date("2020-08-25")
dia
dia =as.Date('25/08/2020', format = '%d/%m/%Y')
dia
dia =as.Date("25/08/2020", format = "%d/%m/%Y")
dia
dia =as.Date("26/08/2020", format = "%d/%m/%Y")
dia
hoje = Sys.time()
dataHoje = as.Date(hoje)
dataHoje
weekdays(dataHoje)
months(dia)
## CALCULOS COM DATAS
dataHoje - dia
## FORMATA DATA
dia =as.Date("01/08/2020", format = "%d/%m/%Y")
dia
## CALCULOS COM DATAS
dataHoje - dia
dataHoje + 2
dataHoje
365 - dataHoje
#1
mat = matrix(1 : 6, 2, 3)
mat
## b
mat[2, 3]
## b
mat[2, ]
mat[ , 3]
## b
mat[2,]
mat[, 3]
## c
dim(mat)
## d
sum(mat)
## e
sum(mat[1,])
## f
apply(mat, 2, mean)
mat
# 2
## a
c(1 : 100)
a = array(1 : 24, c(4, 3, 2)) # c(LINHA, COLUNA, DIMENSAO)
a
# 2
## a
vet2 = c(1 : 100)
## b
matrix(vet2, 10, 10,)
## b
matrix(vet2, 10, 10)
# 3
## a
array(1 : 30, c(2, 5, 3))
## b
vet3[,3,]
# 3
## a
vet3 = array(1 : 30, c(2, 5, 3))
## b
vet3[,3,]
## b
sum(vet3[,3,])
vet3[,,3]
## c
vet3[1,1,]
## c
mean(vet3[1, 1,])
## d
vet3 * 2 + 3
getwd()
## ALTERAR DIRETORIO ATUAL
setwd("/home/renato/Documents")
## OBTER DIRETORIO ATUAL
getwd()
## ALTERAR DIRETORIO ATUAL
setwd("/home/renato/Documents/unifacef")
## ALTERAR DIRETORIO ATUAL
setwd("/home/renato/Documentos/unifacef/mineracao")
## OBTER DIRETORIO ATUAL
getwd()
## ALTERAR DIRETORIO ATUAL
setwd("/home/renato/Documentos/unifacef/mineracao/temp/datascience")
## OBTER DIRETORIO ATUAL
getwd()
tabela = read.table("my_table.txt", header=TRUE)
fileUrl = "http://archive.ics.uci.edu/ml/machine-learning-databases/ecoli/ecoli.data"
download.file(fileUrl, destfile="ecoli.csv")
ecoli = read.table("ecoli.csv")
dim(ecoli)
head(ecoli)
x <- c(2, 3, 5, 9)
print(x)
## ALTERA QTD DE DIGITOS NUMERICOS (DEFAULT = 7)
options(digits=5)
## FUNCAO cat
cat("Este é o valor da variável x: ", x, "\n")
## FUNCAO cat
cat("Este é o valor da variável x:", x, "\n")
## CRIA OU EDITA ARQUIVO
cat(file = "resultado.txt", "Este é o valor da variável x:", x, "\n")
cat(file = "resultado.txt", "Esta linha é adicionada depois da linha anterior
no mesmo arquivo\n", append = TRUE)
cat(
file = "resultado.txt",
"Esta linha é adicionada depois da linha anterior no mesmo arquivo\n",
append = TRUE
)
## CRIA OU EDITA ARQUIVO
cat(file = "resultado.txt", "Este é o valor da variável x:", x, "\n")
cat(
file = "resultado.txt",
"Esta linha é adicionada depois da linha anterior no mesmo arquivo\n",
append = TRUE
)
## ARMAZENAR UMA TABELA (DATA FRAME OU MATRIZ)
x <- matrix(1 : 10, ncol = 5)
write.table(x)
write.table(x, file = "tabela.txt")
x <- seq(1, 10, 0.1)
sink("saida.txt")
x
x^3
sink()
## ADICIONAR NO FINAL
sink("saida.txt", append = T)
cumsum(x)
sink()
## IMPRIME O RESULTADO NO DIPLAY E NO ARQUIVO
sink("saida.txt", append = T, split = T)
summary(x)
sink()
## ARMAZENA EM ARQUIVO CONTEUDOS ASSOCIADOS A OBJETOS E PERMITE CARREGA-LOS
x <- -50 : 50
f <- function(x) if (x < 0) 0 else x
save(x, f, file = "dados.Rdata")
load("dados.Rdata")
f(x)
