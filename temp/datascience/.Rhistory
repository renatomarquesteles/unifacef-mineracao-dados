# 4
## a
A = matrix(2, 2, 3)
B = matrix(1 : 6, 2, 3)
## d
A %*% B
## b
A + B
## c
dim(B) = c(3, 2)
## d
A %*% B
a = vector()
for (i in 1 : 20) a[i] = 2 * i
a
"soma.vetor" = function(vetor) {
s = 0
for (i in 1 : length(vetor))
s = s + vetor[i]
s
}
soma.vetor(a)
"soma.vetor_1" = function(vetor)
{
s = 0
for (i in vetor)
s = s + i
s
}
soma.vetor_1(a)
"media.colunas" = function(matriz)
{
v = vector()
for (i in 1 : ncol(matriz))
v[i] = mean(matriz[,i])
v
}
media.colunas(a)
mat = matrix(1:10, 2, 5)
mat
media.colunas(mat)
mat = matrix(25:1, 5, 5)
media.colunas(mat)
mat
media.colunas(mat)
# 1
"converte.real" = function(reais) {
reais / 5.4;
}
converte.real(5.40)
# 2
p1 = matrix(1 : 4, 2, 2)
p1
p2 = matrix(1 : 4, 2, 2)
p2
distancia <- vector()
for (i in 1 : nrow(p1)) distancia[i] = dt_euclidiana(p1[i, ], p2[i, ])
"dt.euclidiana" = function(p1, p2) {
sqrt(sum((p1 - p2) ^ 2))
}
distancia <- vector()
for (i in 1 : nrow(p1)) distancia[i] = dt_euclidiana(p1[i, ], p2[i, ])
for (i in 1 : nrow(p1)) distancia[i] = dt.euclidiana(p1[i, ], p2[i, ])
distancia
help(dist)
# 2
p1 = c(10, 10)
p1[0]
p1[1]
p1
p2 = c(20, 20)
p2
sqrt(((p1[1] - p2[1]) ^ 2) + ((p1[2] - p2[2]) ^ 2))
"dt.euclidiana" = function(p1, p2) {
sqrt(((p1[1] - p2[1]) ^ 2) + ((p1[2] - p2[2]) ^ 2))
}
distancia = dt.euclidiana(p1, p2)
distancia
matrix(c(10, 10, 20, 20), 2, 2)
matrix(c(10, 20, 10, 20), 2, 2)
dist(matrix(c(10, 20, 10, 20), 2, 2))
# 3
vet = 123 : 155
vet
"contador.pares" = function(vetor) {
cont = 0
for(i in 1 : length(vetor))
if(vetor[i] %% 2 == 0)
cont = cont + 1
cont
}
contador.pares(vet)
# 4
"manipula.string" = function(frase) {
res = paste(sub("v", "b", frase), "campeao!")
res
}
manipula.string("viva o são paulo")
help(sub)
help(paste)
gsub("v", "b", "viva o são paulo")
sub("v", "b", "viva o são paulo")
# 4
"manipula.string" = function(frase) {
res = paste(gsub("v", "b", frase), ", campeão!")
res
}
manipula.string("viva o são paulo")
# 4
"manipula.string" = function(frase) {
res = paste(gsub("v", "b", frase), ", campeão!", sep = "")
res
}
manipula.string("viva o são paulo")
# 5
"calculadora" = function(n1, n2, string){
if (string == "+")
return(n1 + n2)
else if (string == "-")
return(n1 - n2)
else if (string == "*")
return(n1 * n2)
else if (string == "/")
return(n1 / n2)
}
calculadora(5, 5, "+")
calculadora(5, 5, "-")
calculadora(5, 5, "*")
calculadora(5, 5, "/")
# 5
"calculadora" = function(n1, n2, operador){
if (operador == "+")
return(n1 + n2)
else if (operador == "-")
return(n1 - n2)
else if (operador == "*")
return(n1 * n2)
else if (operador == "/")
return(n1 / n2)
}
calculadora(5, 5, "+")
calculadora(5, 5, "-")
calculadora(5, 5, "*")
calculadora(5, 5, "/")
# 5
"minicalculadora" = function(n1, n2, operador){
if (operador == "+")
return(n1 + n2)
else if (operador == "-")
return(n1 - n2)
else if (operador == "*")
return(n1 * n2)
else if (operador == "/")
return(n1 / n2)
}
minicalculadora(5, 5, "+")
minicalculadora(5, 5, "-")
minicalculadora(5, 5, "*")
minicalculadora(5, 5, "/")
# 6
"compara" = function(a, b) {
if (a < b)
return(1)
else if (a == b)
return(0)
else
return(-1)
}
compara(13, 15)
compara(13, 15)
compara(15, 15)
compara(18, 15)
vet
# 7
"media" = function(vet) {
acum = 0
for(i in 1 : length(vet))
acum = acum + vet[i]
return (acum / length(vet))
}
vet = c(57 : 69)
media(vet)
# 8
"abaixo.limite" = function(vet, limite) {
cont = 0
for(i in 1 : length(vet))
if (vet[i] < limite)
cont = cont + 1
cont
}
vet = c(3 : 13)
abaixo.limite(vet, 10)
# 9
"menor.dez" = function(vet) {
i = 0
order(vet)
while(vet[i + 1] < 10) {
i = i + 1
}
return i
}
# 9
"menor.dez" = function(vet) {
i = 0
order(vet)
while(vet[i + 1] < 10) {
i = i + 1
}
return i
}
# 9
"menor.dez" = function(vet) {
i = 0
order(vet)
while(vet[i + 1] < 10) {
i = i + 1
}
return i
}
# 9
"menor.dez" = function(vet) {
i = 0
order(vet)
while(vet[i + 1] < 10) {
i = i + 1
}
return i
}
# 7
"media" = function(vet) {
acum = 0
for(i in 1 : length(vet))
acum = acum + vet[i]
acum / length(vet)
}
vet = c(57 : 69)
media(vet)
# 5
"minicalculadora" = function(n1, n2, operador) {
if (operador == "+")
n1 + n2
else if (operador == "-")
n1 - n2
else if (operador == "*")
n1 * n2
else if (operador == "/")
n1 / n2
}
minicalculadora(5, 5, "+")
minicalculadora(5, 5, "-")
minicalculadora(5, 5, "*")
minicalculadora(5, 5, "/")
# 9
"menor.dez" = function(vet) {
i = 0
order(vet)
while(vet[i + 1] < 10) {
i = i + 1
}
i
}
vet = c(5 : 15)
menor.dez(vet)
mat = matrix(10 : 15, 3, 2)
mat
# 10
"maior.elemento" = function(mat) {
maior = 0
for (i in 1 : nrow(mat))
for(j in 1 : ncol(mat))
if (mat[i, j] > maior)
maior = mat[i, j]
maior
}
maior.elemento(mat)
# 11
"multiplica.diagonal" = function(mat) {
res = 0
for (i in 1 : nrow(mat))
for(j in 1 : ncol(mat))
if (mat[i] == mat[j])
m = prod(c(mat[i,j]))
m
}
mat = matrix(c(1, 1, 1, 1), 2, 2)
mat
# 11
"multiplica.diagonal" = function(mat) {
res = 0
for (i in 1 : nrow(mat))
for(j in 1 : ncol(mat))
if (mat[i] == mat[j])
m = prod(c(mat[i,j]))
m
}
multiplica.diagonal(mat)
mat = matrix(c(2, 1, 1, 3), 2, 2)
mat
multiplica.diagonal(mat)
# 11
"multiplica.diagonal" = function(mat) {
res = 1
for (i in 1 : nrow(mat))
res = res * mat[i, i]
res
}
mat = matrix(c(2, 1, 1, 3), 2, 2)
mat
multiplica.diagonal(mat)
mat = matrix(10 : 20, 2, 5)
mat = matrix(1 : 10, 2, 5)
mat
mat = matrix(1 : 6, 2, 3)
mat
mat1 = matrix(1 : 6, 2, 3)
mat1
mat2 = matrix(c(10, 10, 10, 10, 10, 10), 3, 2)
mat2
# 12
"soma.matrizes" = function(m1, m2) {
res = m1 + m2
as.matrix(res)
res
}
soma.matrizes(mat1, mat2)
mat2 = matrix(c(10, 10, 10, 10, 10, 10), 2, 3)
mat2
soma.matrizes(mat1, mat2)
rep(10, 2)
mat2 = matrix(rep(10, 6), 2, 3)
mat2
soma.matrizes(mat1, mat2)
"distancia" = function (x1, y1, x2, y2) {
r = (x1 - x2)^2 + (y1-y2)^2
sqrt(r)
}
distancia(10, 20, 30, 40)
"conta.pares" <- function(vetor) {
v1 = ((vetor %% 2) == 0)
nr_total = sum(v1)
nr_total
}
v_teste = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
conta.pares(v_teste)
"manipula.string" = function(frase) {
troca = gsub("v", "b", frase)
paste(troca, ", campeão!")
}
manipula.string("viva o são paulo")
"media.vetor" = function (vetor) {
s = 0
n = 0
for (i in vetor) {
s = s + i
n = n + 1
}
s/n
}
vetor_a = c(10, 5, 6, 90, 15)
media.vetor(vetor_a)
"soma.matrizes" = function (m1, m2) {
res = matrix(, nrow = nrow(m1), ncol = ncol(m1))
for (i in 1 : nrow(m1))
for (j in 1 : ncol(m1))
res[i, j] = m1[i, j] + m2[i, j]
res
}
matriz_a = matrix(1 : 9, 3, 3)
matriz_b = matrix(1 : 9, 3, 3)
soma.matrizes(matriz_a, matriz_b)
* Item 1
"funcao.b" = function(vetor, x) {
cont = 0
soma = 0
i = 1
v = sort(vetor)
while (soma <= x) {
soma = soma + v[i]
cont = cont + 1
i = i + 1
}
cont
}
"funcao.b" = function(vetor, x) {
cont = 0
soma = 0
i = 1
v = sort(vetor)
while (soma <= x) {
soma = soma + v[i]
cont = cont + 1
i = i + 1
}
cont
}
vetor_a = c(15, 25, 5, 20, 10)
funcao.b(vetor_a, 30)
"funcao.b" = function(vetor, x){
cont = 0
soma = 0
i = 1
v = sort(vetor)
while (soma <= x){
soma = soma + v[i]
cont = cont +1
i = i+1
}
cont
}
funcao.b(vetor_a, 30)
"funcao.b" = function(vetor, x){
cont = 0
soma = 0
i = 1
v = sort(vetor)
while (soma < x){
soma = soma + v[i]
cont = cont +1
i = i+1
}
cont
}
funcao.b(vetor_a, 30)
## b
"nr.minimo.elementos" = function (vetor, soma) {
vetor = sort(vetor, decreasing = TRUE)
conta_elem = 0
soma_elem = 0
i = 1
while (i <= length(vetor)) {
if (soma_elem < soma) {
conta_elem = conta_elem + 1
soma_elem = soma_elem + vetor[i]
}
i = i + 1
}
paste("Qtde de elementos para atingir a SOMA:", conta_elem)
}
## b
"nr.minimo.elementos" = function (vetor, soma) {
vetor = sort(vetor, decreasing = TRUE)
conta_elem = 0
soma_elem = 0
i = 1
while (i <= length(vetor)) {
if (soma_elem < soma) {
conta_elem = conta_elem + 1
soma_elem = soma_elem + vetor[i]
}
i = i + 1
}
paste("Qtde de elementos para atingir a SOMA:", conta_elem)
}
vetor_a = c(15, 25, 5, 20, 10)
nr.minimo.elementos(vetor_a, 30)
setwd("/home/renato/Documentos/unifacef/mineracao/temp/datascience")
setwd("/home/renato/Documentos/unifacef/mineracao/temp/datascience")
arquivo = "http://darwin.di.uminho.pt/cursoAnaliseDados/earthquakeData.csv"
download.file(arquivo, destfile="earthquakes.csv")
eData = read.csv("earthquakes.csv")
dim(eData)
nrow(eData)
ncol(eData)
names(eData)
rownames(eData)[1:5]
head(eData, 3)
class(eData)
unlist(lapply(eData, class))
names(eData)
class(eData)
unlist(lapply(eData, class))
lapply(eData, class)
help(lapply)
tapply(eData, class)
tapply(eData, class)
apply(eData, class)
lapply(eData, class)
unlist(lapply(eData, typeof)) # LISTA COM O TIPO DE CADA COLUNA
unlist(lapply(eData, class)) # LISTA COM A CLASSE DE CADA COLUNA
unlist(lapply(eData, typeof)) # LISTA COM O TIPO DE CADA COLUNA
names(eData)
names(eData)[5]
names(eData)[5] = "Latitude"
names(eData)
names(eData)[6]
names(eData)[6] = "Longitude"
names(eData)
names(eData)
rownames(eData)[1:7]
colnames(eData)[1:7]
rownames(eData)[1:7]
rownames(eData) = paste("id-", rownames(eData), sep="")
rownames(eData)[1:7]
head(eData, 5)
head(eData, 10)
eData[1:3]
eData[1:3,]
eData[1:10,]
rownames(eData)[1:7]
mean(eData$Magnitude)
median(eData$Magnitude)
sd(eData$Magnitude)
mad(eData$Magnitude)
quantile(eData$Magnitude)
summary(eData$Magnitude)
rowMeans(iris[, -5]) # RETIRA A QUINTA COLUNA QUE NAO EH NUMERICA
colMeans(iris[, -5])
colSums(iris[, -5])
unique(eData$Src)
eData$Src
table(eData$Src)
table(eData$Src, eData$Version)
