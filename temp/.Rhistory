for (j in 1 : length(vet)) {
if (vet[i] == vet[j])
ocorrencias = ocorrencias + 1
if (ocorrencias > maiorNumOcorrencias)
print(ocorrencias)
print(maiorNumOcorrencias)
moda = vet[i]
maiorNumOcorrencias = ocorrencias
}
}
moda
}
moda(pesos)
# 2
"moda" = function (vet) {
maiorNumOcorrencias = 0
for (i in 1 : length(vet)) {
ocorrencias = 0;
print(maiorNumOcorrencias)
for (j in 1 : length(vet)) {
if (vet[i] == vet[j])
ocorrencias = ocorrencias + 1
if (ocorrencias > maiorNumOcorrencias)
moda = vet[i]
maiorNumOcorrencias = ocorrencias
}
}
moda
}
moda(pesos)
# 2
"moda" = function (vet) {
maiorNumOcorrencias = 0
for (i in 1 : length(vet)) {
ocorrencias = 0;
print(maiorNumOcorrencias)
for (j in 1 : length(vet)) {
if (vet[i] == vet[j]) {
ocorrencias = ocorrencias + 1
}
if (ocorrencias > maiorNumOcorrencias) {
moda = vet[i]
maiorNumOcorrencias = ocorrencias
}
}
}
moda
}
moda(pesos)
# 2
"moda" = function (vet) {
maiorNumOcorrencias = 0
for (i in 1 : length(vet)) {
ocorrencias = 0;
for (j in 1 : length(vet)) {
if (vet[i] == vet[j]) {
ocorrencias = ocorrencias + 1
}
if (ocorrencias > maiorNumOcorrencias) {
moda = vet[i]
maiorNumOcorrencias = ocorrencias
}
}
}
moda
}
moda(pesos)
# 3
## a
turma_1 = c(75.02786847, 56.51450656, 55.57517955, 62.00893933, 82.82022277, 91.78076684, 71.53028442, 82.22315417, 71.14621041, 76.27644453)
turma_2 = c(63.96213546, 51.00946728, 54.48449137, 53.62955058, 61.62138863, 59.99119596, 57.61297576, 62.52220793, 64.54041384, 63.95477107)
## b
cat("Média da turma 1:", mean(turma_1))
cat("Média da turma 2:", mean(turma_2))
## c
max(turma_1) - min(turma_1)
max(turma_2) - min(turma_2)
## c
amplitude_1 = max(turma_1) - min(turma_1)
amplitude_1
amplitude_2 = max(turma_2) - min(turma_2)
amplitude_2
df = data.frame(cardapio, precos)
df
# 4
cardapio = c("Filé à parmegiana", "Feijoada", "Batatas Fritas", "Lasanha à Bolonhesa", "Salada Caprese")
precos = c(32.50, 44.00, 12.00, 35.50, 27.00)
df = data.frame(cardapio, precos)
df
# 5
## a
matrix(1:6, 2, 3)
# 5
## a
mat = matrix(1:6, 2, 3)
mat
## b
mat[2, 3]
## c
dim(mat)
## d
sum(mat)
## e
sum(mat[1,])
mat
## f
apply(mat, 2, mean)
v_media = c(mean(mat[,1]), mean(mat[,2]), mean(mat[,3]))
v_media
## b
mat[2, ]
mat[, 3]
## b
linha2 = mat[2, ]
linha2
coluna3 = mat[, 3]
coluna3
# 6
## a
A = matrix(2, 2, 3)
B = matrix(1 : 6, 2, 3)
## b
A + B
## c
dim(B) = c(3, 2)
## d
A %*% B
# 7
lista = list(nome = "João", idade = 30)
lista
lista['nome']
lista['idade']
## b
lista$nome
lista$idade
## b
lista$nome
lista$idade
lista[[1]]
lista[[2]]
# 1
help(co2)
# 1
help(co2)
names(co2)
# 1
help(CO2)
names(CO2)
CO2$Plant
dim(CO2)
# 2
sum(CO2$Treatment == "chilled")
dim(CO2[CO2$Treatment == "chilled", ])[1]
## iii
df = CO2[CO2$Type == "Quebec",]
df
## iv
mat = as.matrix(CO2[c("conc","uptake")])
mat
colnames(mat) = c("concent", "consumo")
rownames(mat) = CO2$Plant
mat
## v
mat[which(rownames(mat) == "Mc3"),]
## vi
v = mat[,2]
v
## vii
CO2$uptake[CO2$Plant == "Qc3" & CO2$conc == 675] * 1000
## viii
CO2[which(CO2$uptake == max(CO2$uptake)),]
tapply(CO2$uptake, CO2$Type, max)
## ix
ind = which(CO2$Type == "Mississippi" & CO2$Treatment == "chilled")
ind
mean(CO2$uptake[ind])
filt = CO2[CO2$Type == "Mississipi" & CO2$Treatment == "chilled",]
filt
mean(filt$uptake)
filt = CO2[CO2$Type == "Mississippi" & CO2$Treatment == "chilled",]
filt
mean(filt$uptake)
# 2
## i
str(airquality)
## ii
sum(is.na(airquality$Ozone))
sum(is.na(airquality$Solar.R))
## iii
mean(airquality$Ozone[airquality$Month == 7], na.rm = TRUE)
## iii
mean(airquality$Solar.R[airquality$Month == 7], na.rm = TRUE)
## iv
which(is.na(airquality$Ozone))
## v
x = airquality[complete.cases(airquality),]
x
# OU
x = na.omit((airquality))
x
# OU
x = na.omit(airquality)
x
for (i in 5:9){
dados = x$Solar.R[x$Month == i]
valores = c(max(dados), min(dados), mean(dados), median(dados), sd(dados), var(dados))
res = rbind(res, valores)
}
## vi
res = NULL
}
for (i in 5:9){
dados = x$Solar.R[x$Month == i]
valores = c(max(dados), min(dados), mean(dados), median(dados), sd(dados), var(dados))
res = rbind(res, valores)
}
rownames(res) = 5:9
colnames(res) = c("Máx", "Min", "Média", "Mediana", "Desvio Padrão", "Variância")
res
# 3
## i
class(chickwts)
names(chickwts)
dim(chickwts)
class(chickwts)
class(chickwts$weight)
class(chickwts$feed)
## ii
sum(is.na(chickwts$weight))
sum(is.na(chickwts$feed))
## iii
table(chickwts$feed)
summary(chickwts$weight)
## iv
tapply(chickwts$weight, chickwts$feed, mean)
## v
m = median(chickwts$weight)
m
b = c(min(chickwts$weight) -1, 0.85 * m, 1.15 * m, max(chickwts$weight) + 1)
b
weight_nominal = cut(chickwts$weight, breaks = b, Lables = c("low", "medium", "high"))
weight_nominal
library(QSARdata)
# 4
## i
install.packages("QSARData")
y
# 4
## i
install.packages("QSARdata")
library(QSARdata)
data(MeltingPoint)
## i
dim(MP_Descriptors)
length(MP_Outcome)
class(MP_Outcome)
## ii
sum(is.na(MP_Descriptors))
## iii
scaled_descs = scale(MP_Descriptors)
scaled_descs
## iv
inds = order(MP_Outcome, decreasing = T)[1:50]
inds
MP_top = scaled_descs[inds, ]
MP_top
# GRÁFICOS DE DISPERSÃO
x <- seq(0.2, 2, 0.01)
f <- function(x) (log(x))^2 - x * exp(-x^3)
plot(x, f(x))
# GRÁFICOS DE DISPERSÃO
x <- seq(0.2, 2, 0.1)
f <- function(x) (log(x))^2 - x * exp(-x^3)
plot(x, f(x))
# GRÁFICOS DE DISPERSÃO
x <- seq(0.2, 2, 0.01)
f <- function(x) (log(x))^2 - x * exp(-x^3)
plot(x, f(x))
plot(x, f(x))
plot(x, f(x), "l")
plot(x, f(x))
plot(x, f(x), type = "l")
plot(iris$Petal.Length, iris$Petal.Width, pch = 19)
plot(iris$Sepal.Length, iris$Sepal.Width,
col = iris$Species,
pch = 19,
cex = iris$Sepal.Length * iris$Sepal.Width * 0.1)
curve(cos(x)/sin(x), -2, 2)
pairs(iris)
scatterplot3d(iris$Petal.Width,
iris$Sepal.Length,
iris$Sepal.Width,
pch = 19,
color = as.integer(iris$Species))
scatterplot3d(iris$Petal.Width,
iris$Sepal.Length,
iris$Sepal.Width,
pch = 19,
color = as.integer(iris$Species))
install.packages(scatterplot3d)
install.packages("scatterplot3d")
scatterplot3d(iris$Petal.Width,
iris$Sepal.Length,
iris$Sepal.Width,
pch = 19,
color = as.integer(iris$Species))
scatterplot3d(iris$Petal.Width,
iris$Sepal.Length,
iris$Sepal.Width,
pch = 19,
color = as.integer(iris$Species))
barplot(table(iris$Species), col = "gray")
barplot(tapply(InsectSprays$count, InsectSprays$spray, mean),
col = "darkgray",
horiz = T)
pie(table(iris$Species), col = gray(seq(0.4, 1.0, length = 3)))
pie(table(iris$Species), col = red(seq(0.4, 1.0, length = 3)))
pie(table(iris$Species), col = red(seq(0.4, 1.0, length = 3)))
pie(table(iris$Species), col = gray(seq(0.4, 1.0, length = 3)))
plot(iris$Petal.Length, iris$Petal.Width,
pch = as.numeric(iris$Species) + 1)
abline(v = median(iris$Petal.Length), lwd = 2)
abline(v = median(iris$Petal.Width), lwd = 2)
abline(h = median(iris$Petal.Width), lwd = 2)
plot(iris$Petal.Length, iris$Petal.Width,
pch = as.numeric(iris$Species) + 1)
abline(v = median(iris$Petal.Length), lwd = 2)
abline(h = median(iris$Petal.Width), lwd = 2)
## SOBREPOSICAO DE UMA LEGENDA
plot(iris$Petal.Length, iris$Petal.Width,
pch = as.numeric(iris$Species) + 19,
main = "Largura vs. Comprimento das Pétalas",
ylab = "Largura",
xlab = "Comprimento")
legend(1.5, 2.2, legend = levels(iris$Species),
pch = c(20, 21, 22))
## SOBREPOSICAO DE INFORMACAO SOBRE MAPAS
install.packages("maps")
library("maps")
map("world")
map("world")
points(eData$Lon, eData$Lat, pch = 19)
library("eData")
arquivo = "http://darwin.di.uminho.pt/cursoAnaliseDados/earthquakeData.csv"
download.file(arquivo, destfile = "earthquakes.csv")
eData = read.csv("earthquakes.csv")
points(eData$Lon, eData$Lat, pch = 19)
map("world")
points(eData$Lon, eData$Lat, pch = 19)
map("world")
points(eData$Lon, eData$Lat, pch = 19)
points(eData$Lon, eData$Lat, pch = 10)
map("world")
points(eData$Lon, eData$Lat, pch = 10)
map("world")
points(eData$Lon, eData$Lat, pch = 1)
map("world")
points(eData$Lon, eData$Lat, pch = 19)
par(mfrow = c(1, 2))
hist(iris$Petal.Length,
breaks = 10,
col = "darkgray",
xlab = "Comprimento Pétalas",
main = "")
hist(iris$Petal.Length,
breaks = 10,
col = "darkgray",
xlab = "Comprimento Pétalas",
main = "")
mtext(text = "a)", side = 3, line = 1)
par(mfrow = c(1, 2))
hist(iris$Petal.Length,
breaks = 10,
col = "darkgray",
xlab = "Comprimento Pétalas",
main = "")
hist(iris$Petal.Length,
breaks = 10,
col = "darkgray",
xlab = "Comprimento Pétalas",
main = "")
mtext(text = "a)", side = 3, line = 1)
hist(iris$Petal.Length,
breaks = 1,
col = "darkgray",
xlab = "Comprimento Pétalas",
main = "")
mtext(text = "a)", side = 3, line = 1)
hist(iris$Petal.Length,
breaks = 10,
col = "darkgray",
xlab = "Comprimento Pétalas",
main = "")
hist(iris$Petal.Length,
breaks = 10,
col = "darkgray",
xlab = "Comprimento Pétalas",
main = "")
hist(iris$Petal.Length,
breaks = 10,
col = "darkgray",
xlab = "Comprimento Pétalas",
main = "")
mtext(text = "a)", side = 3, line = 1)
plot(iris$Petal.Length,
iris$Petal.Width,
col = "darkgray",
pch = 19,
xlab = "Comprimento",
ylab = "Largura",
main = "")
mtext(text = "b)", side = 3, line = 1)
getwd()
getwd()
setwd("/home/renato/Documentos/unifacef/mineracao/temp")
pdf(file = "grafico.pdf",
height = 4,
width = 8)
par(mfrow = c(1, 2))
hist(iris$Petal.Length,
breaks = 10,
col = "darkgray",
xlab = "Comprimento Petalas",
main = "")
mtext(text = "a)", side = 3, line = 1)
plot(iris$Petal.Length,
iris$Petal.Width,
col = "darkgray",
pch = 19,
xlab = "Comprimento",
ylab = "Largura",
main = "")
hist(iris$Petal.Length,
breaks = 10,
col = "darkgray",
xlab = "Comprimento Petalas",
main = "")
par(mfrow = c(1, 2))
hist(iris$Petal.Length,
breaks = 10,
col = "darkgray",
xlab = "Comprimento Petalas",
main = "")
mtext(text = "a)", side = 3, line = 1)
plot(iris$Petal.Length,
iris$Petal.Width,
col = "darkgray",
pch = 19,
xlab = "Comprimento",
ylab = "Largura",
main = "")
mtext(text = "b)", side = 3, line = 1)
pdf(file = "grafico.pdf",
height = 4,
width = 8)
par(mfrow = c(1, 2))
hist(iris$Petal.Length,
breaks = 10,
col = "darkgray",
xlab = "Comprimento Petalas",
main = "")
mtext(text = "a)", side = 3, line = 1)
plot(iris$Petal.Length,
iris$Petal.Width,
col = "darkgray",
pch = 19,
xlab = "Comprimento",
ylab = "Largura",
main = "")
mtext(text = "b)", side = 3, line = 1)
dev.off()
library(ggplot2)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
data("mpg")
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, shape = drv)
## DIFERENTES TIPOS DE DADOS
## ADICIONANDO UMA CAMADA REFERENTE A UMA LINHA DE APROXIMACAO (SMOOTH) AOS DADOS
qplot(displ, hwy,
data = mpg,
geom = c("point", "smooth"))
## OMITINDO VALORES DE UM EIXO
qplot(hwy, data = mpg)
## GRAFICO DE BARRAS ACUMULADAS
qplot(hwy,
data = mpg,
fill = drv)
## FACETAS
qplot(displ, hwy,
data = mpg,
facets = . ~ drv)
## VARIAVEL DEPENDENTE
qplot(hwy,
data = mpg,
facets = drv ~ .,
binwidth = 2)
## A FUNCAO PRINT PERMITE CRIAR O GRAFICO
g = ggplot(data = mpg)
g = g + aes(displ, hwy)
g = g + geom_point()
print(g)
## REFINANDO A CONFIGURACAO
g = g + geom_smooth(method = "lm", se = F)
g = g + theme_bw(base_family = "Times")
## REFINANDO A CONFIGURACAO
g = g + geom_smooth(method = "lm", se = F)
g = g + theme_bw(base_family = "Times")
g = g + labs(x = "Displacement") + labs(y = "Hwy") + labs(title = "MPG")
print(g)
